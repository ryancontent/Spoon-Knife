# -*- coding: utf-8 -*-

# Sample Python code for youtube.playlists.list
# See instructions for running these code samples locally:
# https://developers.google.com/explorer-help/guides/code_samples#python

import os

import google_auth_oauthlib.flow
import googleapiclient.discovery
import googleapiclient.errors

import pandas as pd

scopes = ["https://www.googleapis.com/auth/youtube.readonly"]


def main():
    # Disable OAuthlib's HTTPS verification when running locally.
    # *DO NOT* leave this option enabled in production.
    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    api_service_name = "youtube"
    api_version = "v3"
    client_secrets_file = "googleapikey.json"

    # Get credentials and create an API client
    flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
        client_secrets_file, scopes)
    credentials = flow.run_console()
    youtube = googleapiclient.discovery.build(
        api_service_name, api_version, credentials=credentials)

    titles, descriptions = get_liked_videos(youtube)

    songs = []
    for i, d in enumerate(descriptions):
        if 'music' in d.lower():
            pass
            #print(titles[i])

        # strip details into title and artist
        # predictable pattern based on auto-generated (seems to always be music)
        if 'Auto-generated by YouTube' in d:
            idx = d.find(titles[i])
            title_to_end = d[idx:]
            title_to_next_line = title_to_end.split('\n')
            title_artist = title_to_next_line[0]
            title_artist_split = title_artist.split(' Â· ')
            title = title_artist_split[0]
            if len(title_artist_split) > 1:
                artist = title_artist_split[1]
            else:
                artist = '???'
            songs.append({'artist': artist, 'title': title})

    df = pd.DataFrame(songs)
    df = df.sort_values(by='artist')
    df.to_csv('youtube_liked_songs.csv', index=False)


if __name__ == "__main__":
    main()


def get_liked_videos(client):

    page = 1
    perPage = 50
    totalResults = None
    totalPages = None
    nextPageToken = None

    likedCt = 0
    titles = []
    descriptions = []

    while totalPages is None or page <= totalPages:
        page += 1

        request = client.videos().list(
            part='snippet',
            myRating='like',
            maxResults=perPage,
            pageToken=nextPageToken
        )
        response = request.execute()
        nextPageToken = response['nextPageToken']

        if totalResults is None:
            totalResults = response['pageInfo']['totalResults']
            totalPages = totalResults / perPage
        
        for x in response['items']:
            likedCt += 1
            print('{}'.format(likedCt), x['snippet']['title'])
            titles.append(x['snippet']['title'])
            descriptions.append(x['snippet']['description'])

    return titles, descriptions
